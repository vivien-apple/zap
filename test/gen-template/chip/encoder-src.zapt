{{chip_header}}

#include "chip-zcl-zpro-codec.h"

#include <support/BufBound.h>
#include <support/SafeInt.h>
#include <support/logging/CHIPLogging.h>

#define CHECK_FRAME_LENGTH(value, name)                                                                                            \
    if (value == 0)                                                                                                                \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding APS Frame: %s", name);                                                                   \
        return 0;                                                                                                                  \
    }


#define READ_ATTRIBUTES(name, cluster_id)                                                                                          \
    uint16_t attr_id_count = sizeof(attr_ids) / sizeof(attr_ids[0]);                                                               \
    uint16_t result = encodeReadAttributesCommand(buffer, buf_length, destination_endpoint, cluster_id, attr_ids, attr_id_count);  \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define COMMAND_HEADER(name, cluster_id, command_id)                                                                               \
    BufBound buf    = BufBound(buffer, buf_length);                                                                                \
    uint16_t result = _encodeClusterSpecificCommand(buf, destination_endpoint, cluster_id, command_id);                            \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }

#define COMMAND_FOOTER(name)                                                                                                       \
    result = buf.Fit() && CanCastTo<uint16_t>(buf.Written()) ? static_cast<uint16_t>(buf.Written()) : 0;                           \
    if (result == 0)                                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command", name);                                                                      \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    return result;

#define COMMAND_INSERT_STRING(name, str)                                                                                           \
    size_t length = strlen(str);                                                                                                   \
    if (!CanCastTo<uint8_t>(length))                                                                                               \
    {                                                                                                                              \
        ChipLogError(Zcl, "Error encoding %s command. String too long: %d", name, length);                                         \
        return 0;                                                                                                                  \
    }                                                                                                                              \
    uint8_t str_length = static_cast<uint8_t>(length);                                                                             \
    buf.Put(str_length);                                                                                                           \
    for (uint8_t i = 0; i < str_length; i++)                                                                                       \
    {                                                                                                                              \
        buf.Put(static_cast<uint8_t>(str[i]));                                                                                     \
    }

#define COMMAND(name, cluster_id, command_id)                                                                                      \
    COMMAND_HEADER(name, cluster_id, command_id);                                                                                  \
    COMMAND_FOOTER(name);

using namespace chip;
extern "C" {

{{pad '/*' 78 '-'}}*\
{{pad "| Cluster Name" 70 ' '}}{{pad "|   ID" 9 ' '}}|
{{pad "|" 70 '-'}}{{pad "+" 9 '-'}}|
{{#all_user_clusters}}
{{#unless (isClient side) }}
{{pad (concat "| " name) 70  " "}}{{pad (concat "| " (asHex code 4)) 9 ' '}}|
{{/unless}}
{{/all_user_clusters}}
{{pad '\*' 78 '-'}}*/

static uint16_t doEncodeApsFrame(BufBound & buf, uint16_t profileID, uint16_t clusterId, uint8_t sourceEndpoint,
                                 uint8_t destinationEndpoint, EmberApsOption options, uint16_t groupId, uint8_t sequence,
                                 uint8_t radius, bool isMeasuring)
{

    uint8_t control_byte = 0;
    buf.Put(control_byte); // Put in a control byte
    buf.PutLE16(profileID);
    buf.PutLE16(clusterId);
    buf.Put(sourceEndpoint);
    buf.Put(destinationEndpoint);
    buf.PutLE(options, sizeof(EmberApsOption));
    buf.PutLE16(groupId);
    buf.Put(sequence);
    buf.Put(radius);

    size_t result = 0;
    if (isMeasuring)
    {
        result = buf.Written();
        ChipLogProgress(Zcl, "Measured APS frame size %d", result);
    }
    else
    {
        result = buf.Fit() ? buf.Written() : 0;
        CHECK_FRAME_LENGTH(result, "Buffer too small");
        ChipLogProgress(Zcl, "Successfully encoded %d bytes", result);
    }
    if (!CanCastTo<uint16_t>(result))
    {
        ChipLogProgress(Zcl, "Can't fit our measured size in uint16_t");
        result = 0;
    }

    return static_cast<uint16_t>(result);
}

uint16_t encodeApsFrame(uint8_t * buffer, uint16_t buf_length, EmberApsFrame * apsFrame)
{
    BufBound buf = BufBound(buffer, buf_length);
    return doEncodeApsFrame(buf, apsFrame->profileId, apsFrame->clusterId, apsFrame->sourceEndpoint, apsFrame->destinationEndpoint,
                            apsFrame->options, apsFrame->groupId, apsFrame->sequence, apsFrame->radius, !buffer);
}

uint16_t _encodeCommand(BufBound & buf, uint8_t destination_endpoint, uint16_t cluster_id, uint8_t command, uint8_t frame_control)
{
    CHECK_FRAME_LENGTH(buf.Size(), "Buffer is empty");

    uint8_t seq_num         = 1;     // Transaction sequence number.  Just pick something.
    uint8_t source_endpoint = 1;     // Pick source endpoint as 1 for now.
    uint16_t profile_id     = 65535; // Profile is 65535 because that matches our simple generated code, but we
                                     // should sort out the profile situation.

    if (doEncodeApsFrame(buf, profile_id, cluster_id, source_endpoint, destination_endpoint, 0, 0, 0, 0, false))
    {
        buf.Put(frame_control);
        buf.Put(seq_num);
        buf.Put(command);
    }

    return buf.Fit() && CanCastTo<uint16_t>(buf.Written()) ? static_cast<uint16_t>(buf.Written()) : 0;
}

uint16_t _encodeClusterSpecificCommand(BufBound & buf, uint8_t destination_endpoint, uint16_t cluster_id, uint8_t command)
{
    // This is a cluster-specific command so low two bits are 0b01.  The command
    // is standard, so does not need a manufacturer code, and we're sending
    // client to server, so all the remaining bits are 0.
    uint8_t frame_control = 0x01;

    return _encodeCommand(buf, destination_endpoint, cluster_id, command, frame_control);
}

uint16_t _encodeGlobalCommand(BufBound & buf, uint8_t destination_endpoint, uint16_t cluster_id, uint8_t command)
{
    // This is a global command, so the low bits are 0b00.  The command is
    // standard, so does not need a manufacturer code, and we're sending client
    // to server, so all the remaining bits are 0.
    uint8_t frame_control = 0x00;

    return _encodeCommand(buf, destination_endpoint, cluster_id, command, frame_control);
}

uint16_t encodeReadAttributesCommand(uint8_t * buffer, uint16_t buf_length, uint8_t destination_endpoint, uint16_t cluster_id,
                                     const uint16_t * attr_ids, uint16_t attr_id_count)
{
    BufBound buf = BufBound(buffer, buf_length);
    if (_encodeGlobalCommand(buf, destination_endpoint, cluster_id, 0x00))
    {
        for (uint16_t i = 0; i < attr_id_count; ++i)
        {
            uint16_t attr_id = attr_ids[i];
            buf.PutLE16(attr_id);
        }
    }

    return buf.Fit() && CanCastTo<uint16_t>(buf.Written()) ? static_cast<uint16_t>(buf.Written()) : 0;
}

{{#all_user_clusters}}
{{#unless (isClient side) }}
{{pad '/*' 78 '-'}}*\
{{pad (concat "| Cluster " name) 79 ' '}}|
{{pad "|" 79 '-'}}|
{{pad "| Commands: " 79 ' '}}|
{{pad "|" 79 ' '}}|
{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterSide parent.side)}}
{{#if (isStrEqual clusterName parent.name)}}
{{pad (concat "| * " name) 79 ' '}}|
{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{pad "|" 79 ' '}}|
{{pad "| Attributes: " 79 ' '}}|
{{pad "|" 79 ' '}}|
{{#user_all_attributes}}
{{#if (isNumberEqual clusterCode parent.code)}}
{{pad (concat "| * " name) 79 ' '}}|
{{/if}}
{{/user_all_attributes}}
{{pad '\*' 78 '-'}}*/

{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterSide parent.side)}}
{{#if (isStrEqual clusterName parent.name)}}
uint16_t encode{{clusterName}}{{asType name}}Command(uint8_t * buffer, uint16_t buf_length, uint8_t destination_endpoint{{#zcl_command_arguments}}, {{asNativeType type}} {{asCamelCased label}}{{/zcl_command_arguments}})
{
    COMMAND_HEADER("{{clusterName}}{{asType name}}", {{asHex parent.code 4}}, {{asHex code 2}});
    {{#zcl_command_arguments}}
    {{#if (isStrEqual (asNativeType type) "int16_t")}}
    buf.PutLE16(static_cast<uint16_t>({{asCamelCased label}}));
    {{else if (isStrEqual (asNativeType type) "uint8_t")}}
    buf.Put({{asCamelCased label}});
    {{else if (isStrEqual (asNativeType type) "uint16_t")}}
    buf.PutLE16({{asCamelCased label}});
    {{else if (isStrEqual (asNativeType type) "char *")}}
    COMMAND_INSERT_STRING("{{parent.clusterName}}{{asType parent.name}}", {{asCamelCased label}});
    {{/if}}
    {{/zcl_command_arguments}}
    COMMAND_FOOTER("{{clusterName}}{{asType name}}");
}

{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{#user_all_attributes}}
{{#if (isNumberEqual clusterCode parent.code)}}
uint16_t encodeRead{{parent.name}}{{asType name}}Command(uint8_t * buffer, uint16_t buf_length, uint8_t destination_endpoint)
{
    uint16_t attr_ids[] = { {{asHex attributeCode 4}} };
    READ_ATTRIBUTES("Read{{parent.name}}{{asType name}}", {{asHex clusterCode 4}});
}

{{/if}}
{{/user_all_attributes}}
{{/unless}}
{{/all_user_clusters}}
} // extern "C"
