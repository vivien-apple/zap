{{chip_header}}

#ifndef __CHIPTOOL_CLUSTERS_COMMANDS_H__
#define __CHIPTOOL_CLUSTERS_COMMANDS_H__

#include "../../common/ModelCommand.h"

/*
 * Clusters
 *
{{#all_user_clusters}}
{{#unless (isClient side) }}
 * {{name}} {{asHex code 4}}
{{/unless}}
{{/all_user_clusters}}
 */


/*
 * Start Cluster Specific Commands
 */

{{#all_user_clusters}}
{{#unless (isClient side) }}

/**********************************************************\
|* Cluster {{name}} ({{asHex code 4}})
\**********************************************************/

{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterSide parent.side)}}
{{#if (isStrEqual clusterName parent.name)}}
class {{name}} : public ModelCommand
{
    {{name}}(const uint16_t clusterId) : ModelCommand("{{asCommandLineCommand name}}", clusterId) {}

    size_t EncodeCommand(PacketBuffer * buffer, size_t bufferSize, uint16_t endPointId) override
    {
        {{#if (zcl_command_arguments_count this.id)}}
        {{#zcl_command_arguments}}
        {{asUnderlyingType type}} {{asCamelCased label}};
        {{/zcl_command_arguments}}

        return encode{{name}}Command(
            buffer->Start(),
            bufferSize(),
            endPointId,
            {{#zcl_command_arguments}}
            {{#if end}}
            {{asCamelCased label}}
            {{else}}
            {{asCamelCased label}},
            {{/if}}
            {{/zcl_command_arguments}}
        );
        {{else}}
        return encode{{name}}Command(buffer->Start(), bufferSize, endPointId);
        {{/if}}
    }
}

{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{/unless}}
{{/all_user_clusters}}

{{#all_user_clusters}}
{{#unless (isClient side) }}
void registerCluster{{name}}(Commands & commands)
{
    const char * clusterName = "{{name}}";
    const uint16_t clusterId = {{asHex code 4}}; 

    commands_list clusterCommands = {
        {{#all_user_cluster_commands}}
        {{#if (isStrEqual clusterSide parent.side)}}
        {{#if (isStrEqual clusterName parent.name)}}
        make_unique<{{name}}>(clusterId),
        {{/if}}
        {{/if}}
        {{/all_user_cluster_commands}}
    };

    commands.Register(clusterName, clusterCommands);
}

{{/unless}}
{{/all_user_clusters}}

/*
 * Register all clusters commands
 */
void registerClusters()
{
{{#all_user_clusters}}
{{#unless (isClient side) }}
    registerCluster{{name}}();
{{/unless}}
{{/all_user_clusters}}
}

#endif // __CHIPTOOL_CLUSTERS_COMMANDS_H__
