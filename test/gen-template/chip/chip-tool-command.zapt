{{chip_header}}

#ifndef __CHIPTOOL_CLUSTERS_COMMANDS_H__
#define __CHIPTOOL_CLUSTERS_COMMANDS_H__

#include "../common/ModelCommand.h"

{{pad '/*' 78 '-'}}*\
{{pad "| Cluster Name" 70 ' '}}{{pad "|   ID" 9 ' '}}|
{{pad "|" 70 '-'}}{{pad "+" 9 '-'}}|
{{#all_user_clusters}}
{{#unless (isClient side) }}
{{pad (concat "| " name) 70  " "}}{{pad (concat "| " (asHex code 4)) 9 ' '}}|
{{/unless}}
{{/all_user_clusters}}
{{pad '\*' 78 '-'}}*/

{{#all_user_clusters}}
{{#unless (isClient side) }}
#define {{asDelimitedMacro name}}_CLUSTER_ID {{asHex code 4}}
{{/unless}}
{{/all_user_clusters}}

{{#all_user_clusters}}
{{#unless (isClient side) }}

{{pad '/*' 78 '-'}}*\
{{pad (concat "| Cluster " name) 70 ' '}}{{pad (concat "| " (asHex code 4)) 9 ' '}}|
{{pad "|" 79 '-'}}|
{{pad "| Commands: " 70 ' '}}{{pad "| " 9 ' '}}|
{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterSide parent.side)}}
{{#if (isStrEqual clusterName parent.name)}}
{{pad (concat "| * " name) 70 ' '}}{{pad (concat "|   " (asHex code 2)) 9 ' '}}|
{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{pad "|" 70 ' '}}{{pad "|" 9 ' '}}|
{{pad "|" 79 '-'}}|
{{pad "| Attributes:: " 70 ' '}}{{pad "| " 9 ' '}}|
{{#user_all_attributes}}
{{#if (isNumberEqual clusterCode parent.code)}}
{{pad (concat "| * " name) 70 ' '}}{{pad (concat "| " (asHex attributeCode 4)) 9 ' '}}|
{{/if}}
{{/user_all_attributes}}
{{pad '\*' 78 '-'}}*/

{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterSide parent.side)}}
{{#if (isStrEqual clusterName parent.name)}}
/*
 * Command {{asType name}}
 */
class {{clusterName}}{{asType name}} : public ModelCommand
{
public:
    {{clusterName}}{{asType name}}() : ModelCommand("{{asCommandLineCommand name}}", {{asDelimitedMacro clusterName}}_CLUSTER_ID)
    {
        {{#zcl_command_arguments}}
        {{#if (isStrEqual (asNativeType type) "int16_t")}}
        AddArgument("{{asCamelCased label}}", INT16_MIN, INT16_MAX, &m{{label}});
        {{else if (isStrEqual (asNativeType type) "uint8_t")}}
        AddArgument("{{asCamelCased label}}", 0, UINT8_MAX, &m{{label}});
        {{else if (isStrEqual (asNativeType type) "uint16_t")}}
        AddArgument("{{asCamelCased label}}", 0, UINT16_MAX, &m{{label}});
        {{else if (isStrEqual (asNativeType type) "char *")}}
        AddArgument("{{asCamelCased label}}", &m{{label}});
        {{else}}
        // FIXME - {{type}} is not supported.
        AddArgument("{{asCamelCased label}}", &m{{label}});
        {{/if}}
        {{/zcl_command_arguments}}
    }

    size_t EncodeCommand(PacketBuffer * buffer, size_t bufferSize, uint16_t endPointId) override
    {
        {{#if (zcl_command_arguments_count this.id)}}
        return encode{{clusterName}}{{name}}Command(buffer->Start(), bufferSize, endPointId,{{#zcl_command_arguments}}{{#if end}} m{{label}}{{else}} m{{label}},{{/if}}{{/zcl_command_arguments}});
        {{else}}
        return encode{{clusterName}}{{name}}Command(buffer->Start(), bufferSize, endPointId);
        {{/if}}
    }
    {{#all_user_cluster_commands}}
    {{#if (isStrEqual clusterName parent.clusterName)}}
    {{#if (isClient clusterSide) }}
    {{#if (isStrEqual (concat parent.name "Response") name)}}

    // Cluster Specific Response: {{name}}
    bool HandleClusterResponse(uint8_t * message, uint16_t messageLen) const override
    {
        ChipLogProgress(chipTool, "{{name}}:");

        {{#zcl_command_arguments}}
        {{#if (isStrEqual (asNativeType type) "int16_t")}}
        {{asNativeType type}} {{asCamelCased label}} = chip::Encoding::LittleEndian::Read16(message);
        ChipLogProgress(chipTool, "  {{asCamelCased label}}: %d", {{asCamelCased label}});

        {{else if (isStrEqual (asNativeType type) "uint8_t")}}
        {{asNativeType type}} {{asCamelCased label}} = chip::Encoding::Read8(message);
        ChipLogProgress(chipTool, "  {{asCamelCased label}}: 0x%02x", {{asCamelCased label}});

        {{else if (isStrEqual (asNativeType type) "uint16_t")}}
        {{asNativeType type}} {{asCamelCased label}} = chip::Encoding::LittleEndian::Read16(message);
        ChipLogProgress(chipTool, "  {{asCamelCased label}}: 0x%04x", {{asCamelCased label}});

        {{else if (isStrEqual (asNativeType type) "char *")}}
        uint8_t msgLen = chip::Encoding::Read8(message);
        ChipLogProgress(chipTool, "  {{asCamelCased label}} len: 0x%02x", msgLen);

        {{else}}
        // FIXME - {{type}} is not supported.
        {{asNativeType type}} {{asCamelCased label}};

        {{/if}}
        {{/zcl_command_arguments}}
        return true;
    }
    {{/if}}
    {{/if}}
    {{/if}}
    {{/all_user_cluster_commands}}
{{#if (zcl_command_arguments_count this.id)}}

private:
    {{#zcl_command_arguments}}
    {{asNativeType type}} m{{label}};
    {{/zcl_command_arguments}}
{{/if}}
};

{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{#user_all_attributes}}
{{#if (isNumberEqual clusterCode parent.code)}}
/*
 * Attribute {{asType name}}
 */
class Read{{parent.name}}{{asType name}} : public ModelCommand
{
public:
    Read{{parent.name}}{{asType name}}() : ModelCommand("read", {{asDelimitedMacro parent.name}}_CLUSTER_ID)
    {
        AddArgument("attr-name", "{{asCommandLineCommand name}}");
    }

    size_t EncodeCommand(PacketBuffer * buffer, size_t bufferSize, uint16_t endPointId) override
    {
        return encodeRead{{parent.name}}{{asType name}}Command(buffer->Start(), bufferSize, endPointId);
    }
};

{{/if}}
{{/user_all_attributes}}
{{/unless}}
{{/all_user_clusters}}

{{#all_user_clusters}}
{{#unless (isClient side) }}
void registerCluster{{name}}(Commands & commands)
{
    const char * clusterName = "{{name}}";

    commands_list clusterCommands = {
        {{#all_user_cluster_commands}}
        {{#if (isStrEqual clusterSide parent.side)}}
        {{#if (isStrEqual clusterName parent.name)}}
        make_unique<{{clusterName}}{{asType name}}>(),
        {{/if}}
        {{/if}}
        {{/all_user_cluster_commands}}
        {{#user_all_attributes}}
        {{#if (isNumberEqual clusterCode parent.code)}}
        make_unique<Read{{parent.name}}{{asType name}}>(),
        {{/if}}
        {{/user_all_attributes}}
    };

    commands.Register(clusterName, clusterCommands);
}

{{/unless}}
{{/all_user_clusters}}

{{pad '/*' 78 '-'}}*\
{{pad '| Register all Clusters commands' 79 ' '}}|
{{pad '\*' 78 '-'}}*/
void registerClusters(Commands & commands)
{
{{#all_user_clusters}}
{{#unless (isClient side) }}
    registerCluster{{name}}(commands);
{{/unless}}
{{/all_user_clusters}}
}

#endif // __CHIPTOOL_CLUSTERS_COMMANDS_H__
